{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "99cedcfd",
   "metadata": {
    "papermill": {
     "duration": 0.007126,
     "end_time": "2025-03-25T18:53:35.459108",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.451982",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<IMG SRC=\"https://ucalgary.ca/themes/ucalgary/ucws_theme/images/UCalgary.svg\" WIDTH=250 ALIGN=\"right\">    </IMG>\n",
    "## Plotting $\\dot{V}O_2$ continued...\n",
    "\n",
    "#### Developed by Dr. John Holash at the University of Calgary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb021a9b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.472803Z",
     "iopub.status.busy": "2025-03-25T18:53:35.472375Z",
     "iopub.status.idle": "2025-03-25T18:53:35.490776Z",
     "shell.execute_reply": "2025-03-25T18:53:35.489281Z"
    },
    "papermill": {
     "duration": 0.029221,
     "end_time": "2025-03-25T18:53:35.494290",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.465069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/demo-knes381/subject_1321.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1432.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1321.csv\n",
      "/kaggle/input/demo-knes381/subject_1232.csv\n",
      "/kaggle/input/demo-knes381/VO2_CSV.csv\n",
      "/kaggle/input/demo-knes381/subject_1232.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1432.csv\n",
      "/kaggle/input/demo-knes381/subject_1523.csv\n",
      "/kaggle/input/demo-knes381/VO2_excel.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1523.xlsx\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0b3afb8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.508146Z",
     "iopub.status.busy": "2025-03-25T18:53:35.507237Z",
     "iopub.status.idle": "2025-03-25T18:53:35.527746Z",
     "shell.execute_reply": "2025-03-25T18:53:35.526459Z"
    },
    "papermill": {
     "duration": 0.030403,
     "end_time": "2025-03-25T18:53:35.530491",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.500088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('../input/demo-knes381/subject_1232.csv', header=[0], skiprows=[1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6976bf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.544220Z",
     "iopub.status.busy": "2025-03-25T18:53:35.543795Z",
     "iopub.status.idle": "2025-03-25T18:53:35.574081Z",
     "shell.execute_reply": "2025-03-25T18:53:35.572580Z"
    },
    "papermill": {
     "duration": 0.039908,
     "end_time": "2025-03-25T18:53:35.576669",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.536761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54 entries, 0 to 53\n",
      "Data columns (total 17 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   TIME         54 non-null     float64\n",
      " 1   VO2          54 non-null     float64\n",
      " 2   VO2/kg       54 non-null     float64\n",
      " 3   METS         54 non-null     float64\n",
      " 4   VCO2         54 non-null     float64\n",
      " 5   VE           54 non-null     float64\n",
      " 6   RER          54 non-null     float64\n",
      " 7   RR           54 non-null     float64\n",
      " 8   Vt           54 non-null     float64\n",
      " 9   FEO2         54 non-null     float64\n",
      " 10  FECO2        54 non-null     float64\n",
      " 11  HR           54 non-null     float64\n",
      " 12  VE/VO2       54 non-null     float64\n",
      " 13  VE/VCO2      54 non-null     float64\n",
      " 14  PetCO2       54 non-null     float64\n",
      " 15  PO           54 non-null     int64  \n",
      " 16  Unnamed: 16  9 non-null      float64\n",
      "dtypes: float64(16), int64(1)\n",
      "memory usage: 7.3 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bff8b3b",
   "metadata": {
    "papermill": {
     "duration": 0.005426,
     "end_time": "2025-03-25T18:53:35.588109",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.582683",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Rename some of the columns so they make sense\n",
    "you can rename them with the value TIME -> Time(min) but don't leave spaces if you want to auto-complete names..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0a71f3b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.600896Z",
     "iopub.status.busy": "2025-03-25T18:53:35.600489Z",
     "iopub.status.idle": "2025-03-25T18:53:35.606954Z",
     "shell.execute_reply": "2025-03-25T18:53:35.605693Z"
    },
    "papermill": {
     "duration": 0.015571,
     "end_time": "2025-03-25T18:53:35.609188",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.593617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.rename(columns={'VE/': 'VE/VO2','VE/.1': 'VE/VCO2'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4740ce76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.622364Z",
     "iopub.status.busy": "2025-03-25T18:53:35.621960Z",
     "iopub.status.idle": "2025-03-25T18:53:35.635312Z",
     "shell.execute_reply": "2025-03-25T18:53:35.633989Z"
    },
    "papermill": {
     "duration": 0.023146,
     "end_time": "2025-03-25T18:53:35.638143",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.614997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54 entries, 0 to 53\n",
      "Data columns (total 17 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   TIME         54 non-null     float64\n",
      " 1   VO2          54 non-null     float64\n",
      " 2   VO2/kg       54 non-null     float64\n",
      " 3   METS         54 non-null     float64\n",
      " 4   VCO2         54 non-null     float64\n",
      " 5   VE           54 non-null     float64\n",
      " 6   RER          54 non-null     float64\n",
      " 7   RR           54 non-null     float64\n",
      " 8   Vt           54 non-null     float64\n",
      " 9   FEO2         54 non-null     float64\n",
      " 10  FECO2        54 non-null     float64\n",
      " 11  HR           54 non-null     float64\n",
      " 12  VE/VO2       54 non-null     float64\n",
      " 13  VE/VCO2      54 non-null     float64\n",
      " 14  PetCO2       54 non-null     float64\n",
      " 15  PO           54 non-null     int64  \n",
      " 16  Unnamed: 16  9 non-null      float64\n",
      "dtypes: float64(16), int64(1)\n",
      "memory usage: 7.3 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f549086a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.652283Z",
     "iopub.status.busy": "2025-03-25T18:53:35.651291Z",
     "iopub.status.idle": "2025-03-25T18:53:35.656601Z",
     "shell.execute_reply": "2025-03-25T18:53:35.655397Z"
    },
    "papermill": {
     "duration": 0.014835,
     "end_time": "2025-03-25T18:53:35.658974",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.644139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16e2d52a",
   "metadata": {
    "papermill": {
     "duration": 0.005676,
     "end_time": "2025-03-25T18:53:35.670497",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.664821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Create our big plot...\n",
    "1st define our variables x,y,& y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a1f448f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.684515Z",
     "iopub.status.busy": "2025-03-25T18:53:35.683613Z",
     "iopub.status.idle": "2025-03-25T18:53:35.689001Z",
     "shell.execute_reply": "2025-03-25T18:53:35.687893Z"
    },
    "papermill": {
     "duration": 0.015218,
     "end_time": "2025-03-25T18:53:35.691555",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.676337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# simplify our terms to reduce future typing...\n",
    "x = df['TIME']\n",
    "y = df['VO2']\n",
    "y1 = df['VE']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7afc6199",
   "metadata": {
    "papermill": {
     "duration": 0.006485,
     "end_time": "2025-03-25T18:53:35.703894",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.697409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Find the position where max occurs, on each axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1940f156",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.717156Z",
     "iopub.status.busy": "2025-03-25T18:53:35.716787Z",
     "iopub.status.idle": "2025-03-25T18:53:35.722304Z",
     "shell.execute_reply": "2025-03-25T18:53:35.721152Z"
    },
    "papermill": {
     "duration": 0.014743,
     "end_time": "2025-03-25T18:53:35.724403",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.709660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Find VO2 max value \n",
    "ymax = max(y)\n",
    "\n",
    "# find the x position of the ymax value or where ymax occurs on the x axis\n",
    "xmax = x[y.argmax()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92d83451",
   "metadata": {
    "papermill": {
     "duration": 0.005603,
     "end_time": "2025-03-25T18:53:35.735668",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.730065",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Now we can discover what these values are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4ca7b6ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.749267Z",
     "iopub.status.busy": "2025-03-25T18:53:35.748311Z",
     "iopub.status.idle": "2025-03-25T18:53:35.754027Z",
     "shell.execute_reply": "2025-03-25T18:53:35.752856Z"
    },
    "papermill": {
     "duration": 0.015068,
     "end_time": "2025-03-25T18:53:35.756450",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.741382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.184775\n",
      "26.500189\n"
     ]
    }
   ],
   "source": [
    "print(ymax)\n",
    "print(xmax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70816e2c",
   "metadata": {
    "papermill": {
     "duration": 0.005743,
     "end_time": "2025-03-25T18:53:35.768090",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.762347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Create the frame and the axis that we will plot in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "45f0f112",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:35.782786Z",
     "iopub.status.busy": "2025-03-25T18:53:35.781857Z",
     "iopub.status.idle": "2025-03-25T18:53:36.090579Z",
     "shell.execute_reply": "2025-03-25T18:53:36.089380Z"
    },
    "papermill": {
     "duration": 0.319328,
     "end_time": "2025-03-25T18:53:36.093311",
     "exception": false,
     "start_time": "2025-03-25T18:53:35.773983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# break up the figure and axis definitions of a plot \n",
    "# so it is easier to assign values\n",
    "\n",
    "fig, ax = plt.subplots(2, 1, sharex=True)\n",
    "\n",
    "# create 2 subplots share x axis, in the next line we will remove \n",
    "# spaces between the horizontal axis, play with this value to see what happens the value can be 0.01 for example\n",
    "\n",
    "fig.subplots_adjust(hspace=0.1\n",
    "                   )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d7fbe1a",
   "metadata": {
    "papermill": {
     "duration": 0.006013,
     "end_time": "2025-03-25T18:53:36.105593",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.099580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Now that we have that axis value specified, annotate the position and marker for VO2 max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "464e5bc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:36.120363Z",
     "iopub.status.busy": "2025-03-25T18:53:36.119938Z",
     "iopub.status.idle": "2025-03-25T18:53:36.129001Z",
     "shell.execute_reply": "2025-03-25T18:53:36.127812Z"
    },
    "papermill": {
     "duration": 0.019785,
     "end_time": "2025-03-25T18:53:36.131439",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.111654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(27.000189, 5.184775, '$\\\\dot VO_2max$ =(4.18) L/min')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(ymax, 2)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ 1),\n",
    "               arrowprops=dict(facecolor='red', shrink= 0.05),\n",
    "                )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fb37846",
   "metadata": {
    "papermill": {
     "duration": 0.005888,
     "end_time": "2025-03-25T18:53:36.143524",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.137636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### For the first plot ax[0] we create the lable and make it red\n",
    "Then we get rid of the right and top plot frame\n",
    "We set the y axis lab as \"L/min\" and tell it to print a legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2e7d430b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:36.157359Z",
     "iopub.status.busy": "2025-03-25T18:53:36.156914Z",
     "iopub.status.idle": "2025-03-25T18:53:36.169624Z",
     "shell.execute_reply": "2025-03-25T18:53:36.168445Z"
    },
    "papermill": {
     "duration": 0.023159,
     "end_time": "2025-03-25T18:53:36.172617",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.149458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7eaa1d15ea50>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ax[0].plot(x, y,  label=('$\\dot VO_2$'), c='r' )\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "#ax.set(title = ('$\\dot VO_2$'), label=('$\\dot VO_2$ L/min'))  \n",
    "ax[0].set(ylabel=('L/min'))\n",
    "ax[0].legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3fe8ab9",
   "metadata": {
    "papermill": {
     "duration": 0.006177,
     "end_time": "2025-03-25T18:53:36.185254",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.179077",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Same thing for the second plot *note* we don't see the plot because we have not ploted the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b89090ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:36.200641Z",
     "iopub.status.busy": "2025-03-25T18:53:36.199528Z",
     "iopub.status.idle": "2025-03-25T18:53:36.211887Z",
     "shell.execute_reply": "2025-03-25T18:53:36.210581Z"
    },
    "papermill": {
     "duration": 0.022551,
     "end_time": "2025-03-25T18:53:36.214238",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.191687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7eaa1d1b0350>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, label=('VE'), c='b')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('L/min'))\n",
    "ax[1].legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8d5ad43",
   "metadata": {
    "papermill": {
     "duration": 0.006203,
     "end_time": "2025-03-25T18:53:36.226952",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.220749",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### We can now create a file with our first plot! We will save the plot first for reasons discussed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2e14978a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:36.242396Z",
     "iopub.status.busy": "2025-03-25T18:53:36.241232Z",
     "iopub.status.idle": "2025-03-25T18:53:36.884379Z",
     "shell.execute_reply": "2025-03-25T18:53:36.883294Z"
    },
    "papermill": {
     "duration": 0.653875,
     "end_time": "2025-03-25T18:53:36.887256",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.233381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fig.savefig(\"VO2-VE-3.png\", dpi=300, bbox_inches = \"tight\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ba3848f",
   "metadata": {
    "papermill": {
     "duration": 0.006479,
     "end_time": "2025-03-25T18:53:36.900459",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.893980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### As this is an interactive space we need to put all the code together for it to plot out interactively..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cdbbb8d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:36.915342Z",
     "iopub.status.busy": "2025-03-25T18:53:36.914890Z",
     "iopub.status.idle": "2025-03-25T18:53:37.943034Z",
     "shell.execute_reply": "2025-03-25T18:53:37.941755Z"
    },
    "papermill": {
     "duration": 1.038659,
     "end_time": "2025-03-25T18:53:37.945590",
     "exception": false,
     "start_time": "2025-03-25T18:53:36.906931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# break up the figure and axis definitions of a plot \n",
    "# so it is easier to assign values\n",
    "fig, ax = plt.subplots(2, 1, sharex=True)  # Height increased from default\n",
    "# spaces between the horizontal axis, play with this value?\n",
    "fig.subplots_adjust(hspace=0)\n",
    "\n",
    "\n",
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(ymax, 2)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ 1),\n",
    "               arrowprops=dict(facecolor='red', shrink= 0.05),\n",
    "                )\n",
    "\n",
    "ax[0].plot(x, y,  label=('$\\dot VO_2$'), c='r' )\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "#ax.set(title = ('$\\dot VO_2$'), label=('$\\dot VO_2$ L/min'))  \n",
    "ax[0].set(ylabel=('L/min'))\n",
    "ax[0].legend()\n",
    "\n",
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, label=('VE'), c='b')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('breaths/min'))\n",
    "ax[1].legend()\n",
    "\n",
    "#ax[0].set_ylim(min(y) - 1, max(y) + 1)  # Adjust as needed for your data\n",
    "#ax[1].set_ylim(min(y1) - 1, max(y1) + 1)  # Adjust as needed\n",
    "\n",
    "# save the figure before we show it... or it will be blank\n",
    "fig.savefig(\"VO2-VE-3.png\", dpi=300, bbox_inches = \"tight\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bebc71f",
   "metadata": {
    "papermill": {
     "duration": 0.00687,
     "end_time": "2025-03-25T18:53:37.959707",
     "exception": false,
     "start_time": "2025-03-25T18:53:37.952837",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### We can put this all together now in one code block that does everything...\n",
    "\n",
    "We have built up each part seperatly in the code above to make sure that all parts of our code should and do work.  Now that we know everything works we can take the next step of putting it together in one code block so we don't run into coherence problems (running things out of order).  We will run everything in one block now, this is a self contained python file and you could turn it into a .py file and run it from the command line and if your path to the datafile was accurate it would run and save the image file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fe908c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T18:53:37.976914Z",
     "iopub.status.busy": "2025-03-25T18:53:37.975809Z",
     "iopub.status.idle": "2025-03-25T18:53:39.424393Z",
     "shell.execute_reply": "2025-03-25T18:53:39.422925Z"
    },
    "papermill": {
     "duration": 1.460611,
     "end_time": "2025-03-25T18:53:39.427540",
     "exception": false,
     "start_time": "2025-03-25T18:53:37.966929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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uW3q0qVLdeedd0ZkvEAsVNRUaOHahfqk+RPfsYLMApXPLafGLgAAx7Dkiu7u3bu1cOFCrVixQhkZGUE/7thafN59dl3V6FuyZIkOHjzo+9q9e3fogwairKKmQqXPlvoFuZJU11yn0mdLVVFTEaeRAQBgTREPdI8ePRqwC1p1dXXQz/HWW29p3759mjJlilJTU5Wamqr169frvvvuU2pqqtzuzh/VDhkyRHv27PE7tm/fPqWmpnbZotjpdCozM9PvC7Ait8ethWsX+rUF9vIeW7R2EWkMAAB0ENFAd9WqVfrKV76iefPmaeLEifrnP//pO3fppZcG/TyzZ8/W1q1btWXLFt/X1KlTdckll2jLli1yODp3iJo+fbpeeeUVv2Mvv/yypk6dqrS0tNC/KcACqnZVdVrJ7ciUqd3Nu1W1qyqGowIAwNoimqP785//XG+//bZyc3O1adMmXX755br11lt18cUXqzflevv379+p0cRxxx2nQYMG+Y4vWbJEdXV1evLJJyVJCxYs0P3336/Fixfr6quv1oYNG/TII49o5cqVkfsGgTipP1Qf0esQWw7DUHHhQN9tIJkxHxBLEQ10W1tblZubK0maOnWqXnvtNZWUlKi2tjbivazr6+u1a9cu3/1Ro0bppZde0g033KAHHnhAQ4cO1X333advf/vbEX1dIB7y+3feTBnOdYgtwzCU29cZ72EAlsB8QCxFtDParFmzVF5e7tfcoaWlRZdffrmee+45tbW1ReqlooLOaLAqt8etkeUjVddcFzBP15ChgswC7Vi4Q46Uzqk9AAAko4jm6D711FMaPHiw37H09HStXLlS69evj+RLAUnFkeJQ+dxySe1BbUfe+2VzywhyLcpjmvqw8TN92PgZnaCQ9JgPiKWIBLr/+te/9Nxzz+mtt96Sy+UKeM3Xvva1SLwUkLRKTizRqgtWaVjmML/jBZkFWnXBKuroWpjHNPXOvma9s6+ZX+xIeswHxFJYObptbW268sor9fTTT/vVrJ0xY0anFAYA4Ss5sUTzx85X1a4q1R+qV37/fBUPL2YlFwCAAMJa0b377rv10ksv6aGHHtKHH36o9957T48//riOHj2qadOm6U9/+lOkxgngC44Uh2aOnKmLJlykmSNnEuQCANCFsFZ0n3rqKf32t7/VZZdd5js2btw4XXrppbr33nt1wQUX6J13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evW8OTnzNWLEHUpNHeB3nBxcID7CrrogtdfSfffdd7Vv3z55PB6/c+edd14kXgIAEpbHNPXBp4clSScMohOUFQS7cSzY66TA+b6pqQNVULBQI0bcSg7uF5gPiKWwA921a9fqsssu0/79+zudMwxDbndou1cBwC46/mL/ysDj+MVuAUePbg/qumA3mHWV79vW1qidO+/QccedxGruF5gPiKWwUxd++MMf6jvf+Y7q6+vl8Xj8vghyAQBWY5pu/fvfy3u8rmPzhp6er/tGEVJt7aKQy5YBCF3Yge6+ffu0ePFi5eXlRWI8AACEpae6uO1lvep6fJ4hQ64OKt0gWvm+AMIXdupCaWmpKisrNXr06EiMBwCAkAVTFzfYvNu+fccEdV008n0BREbYge7999+v73znO6qqqtKECROUlpbmd/76668P9yUAAOhRsHVxg827jdd1ACIn7ED36aef1l/+8hf16dNHlZWVfk0iDMMg0AUARF3PebKGamsXKSdnfq8aOwQj0s8HIHLCztH9yU9+op/97Gc6ePCgdu7cqR07dvi+Pvroo0iMEQCAbvUmT9YwHCoqKv/i+LE7/tvvFxWVBV0OLNLPByBywg50W1pa9N3vflcpKfSeAIBAHIahmcMHaebwQbQ8jZLe5snm5pZo/PhVcjqH+Z0PtbFDpJ/PzpgPiKWwWwDfcMMNys3N1S233BKpMcUNLYABIDE1NlbqnXdm9XjdySev04ABM333TdP9RRWGeqWn5ys7uzislddIPx+A8ISdo+t2u/WrX/1Kf/nLXzRx4sROm9F+85vfhPsSAAB0K9Q8WcNw+AW+4Yr08wEIT9iB7tatWzV58mRJ0nvvved3zuAjCQCQxzRV2/iZJKloAJ2gosGbJ9tedcGQf7BLnqyVMB8QSyEHurfccovOP/98rVu3LpLjAQDb8Zim3ms4JEk6Prsvv9ijxJsnG7iObhl5shbBfEAshRzo1tfX65vf/KYcDofOPfdcnX/++Zo9e7acTmckxwcAQNByc0uUkzOfPFkAksIIdB977DGZpqnXX39df/zjH7V48WLV1dXprLPO0nnnnadvfvObysnJieRYAQDoEXmyALzCqglmGIaKi4v1q1/9Sh988IHefPNNTZs2TQ899JCGDRumGTNm6J577lFdXc89xQEAAIBIimjx2xNPPFE33XST3njjDX3y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IXPQeq677jo9/fTTeuGFF9S/f3/fSm1WVpb69OkjqfPPUuaidYTy/jEPLSKOFR+QQB544AFzxIgRZnp6unnKKaf4lVS5/PLLza9//eu++//93/9tjh492szIyDAHDBhgnnHGGeaLL74Yh1HDNL8scXPs1+WXX26aZuf3zzRNs7Ky0pw8ebKZnp5ujhw50nzwwQdjP3D49PY9ZA5aT6D3T5L52GOP+a5hLlpXKO8f89AaDNP8IrMdAAAAsBFydAEAAGBLBLoAAACwJQJdAAAA2BKBLgAAAGyJQBcAAAC2RKALAAAAWyLQBQAAgC0R6AJAFOzatUv9+vXT1q1b4z0UAEhaNIwAgChoa2vTzp07NXz4cKWnp8d7OACQlAh0AQAAYEukLgAAAMCWCHQBwCY+/fRTDR48WDt37ozp686cOVOLFi3q1WNKS0v1m9/8JjoDAoAvEOgCQIRMnDhRt99+e8Bzv/jFLzRgwAA1NDRIkrZs2aILL7xQQ4YMUXp6ukaPHq077rhDra2tIb/+0qVLde6552rkyJGSpCuuuELnn39+j4+74oor9F//9V8hv25FRYXuuuuuXj3mpz/9qe6++241NzeH/LoA0BMCXQCIkIkTJwassrBnzx4tXbpUd955p3Jzc/XYY4/ptNNOU15env70pz+ppqZGt912m+677z5dccUVIb320aNH9cgjj+iqq67q1eM8Ho9efPFFzZ8/P6TXlaSBAweqf//+vXrMxIkTNXLkSP3f//1fyK8LAD0h0AWACJkwYYLee++9TsdvueUWjRgxQtdee60qKyt11VVX6aGHHlJ5ebmmTp2q0aNH64orrtCvf/1rPf300/rggw96/dp//vOflZqaqunTp/fqcW+88YZSUlJ0+umnS2pPQ/jRj36kRYsWacCAAcrLy9Py5cv12Wef6corr1T//v01evRo/fnPf/Y9x7GpCzNnztT111+vm266SQMHDtSQIUN0xx13dHrt8847TytXruz19woAwSLQBYAImTBhgj788EMdPXrUd2zz5s164okndN999yk1NVULFy7UOeeco8svv7zT42fNmiVJeuedd3r92q+99pqmTp3a68etWbNG5557rlJSvvx18MQTTygnJ0dvvvmmfvSjH+kHP/iBvvOd7+irX/2q3n77bZ199tm69NJLdeTIkS6f94knntBxxx2nf/7zn/rVr36ln/3sZ3rllVf8rjnttNP05ptvyuVy9XrcABAMAl0AiJAJEybI4/GopqbGd2zRokX61re+pTPPPFObN2/Wu+++q+uuuy7g470Bcih1d3fu3KmhQ4f2+nFr1qzplLZw8skn6yc/+YnGjBmjJUuWqE+fPsrJydHVV1+tMWPG6Kc//ak+/fRTvfvuu10+rzdfecyYMbrssss0depU/e1vf/O7ZtiwYXK5XNqzZ0+vxw0AwSDQBYAIKSwsVHZ2ti9Pd9WqVdq4caPuvfdeSe2ru5I0adKkgI9/++23fed3796tmTNnaty4cZo4caKee+65bl/76NGjysjI6NV4a2pq9Mknn+gb3/iG3/GJEyf6bjscDg0aNEgTJkzwHcvLy5Mk7du3r8vn7vgckpSfn9/p+j59+khStyvDABCO1HgPAADsxJun63K5dNNNN+mmm27SiBEjJMlXUaGrgPSBBx5QcXGxRo0apfr6epWVlWnSpEnat2+fTjnlFM2bN0/HHXdcwMfm5OSosbGxV2Nds2aNzjrrLF/A6ZWWluZ33zAMv2OGYUhq38jWlUDPcez1Bw4ckCTl5ub2atwAECxWdAEggryB7m9+8xu53W7dfPPNvnOTJ0+WJK1fv77T4+69915t2bJF5eXlktpXQL0rv4MHD9bAgQN9gWEgkydP1vvvv9+rsb7wwgs677zzevWYSHrvvfdUUFCgnJycuI0BgL2xogsAETRhwgQ9++yzeuONN/Too4/6rZaedtppmjt3rq677jq1trZq6tSp2rt3rx5++GGtWLFCzzzzjC8Y7mjTpk3yeDwqLCzs8nXPPvtsLVmyRI2NjRowYIDv+MGDB7Vlyxa/awcOHKiMjAxt3LhRzz//fNjfc6iqqqo0Z86cuL0+APsj0AWACJowYYL279+vWbNmqbS0tNP51atX6/bbb9ePf/xj7dmzRzk5OTrzzDO1ZcsWnXDCCZ2u//TTT3XZZZfp4Ycf7vF1p06dqmeffVbXXHON73hlZWWn4Pnyyy9XcXGxTj/9dA0ePDjE7zQ8n3/+uf7whz/oL3/5S1xeH0ByMEzTNOM9CABAZy6XS2eddZauvvpqXXrppT1e/9JLL+nGG2/Ue++951cuLJDzzjtPZ5xxhm666aZIDbdXHnjgAb3wwgt6+eWX4/L6AJIDK7oAYEGmaeqKK67QmWeeGVSQK0nz5s3T9u3bVVdX122agySdccYZuuiiiyIx1JCkpaXpf/7nf+L2+gCSAyu6AGBBr7/+umbMmOFXpuupp57yK/MFAOgegS4AAABsifJiAAAAsCUCXQAAANgSgS4AAABsiUAXAAAAtkSgCwAAAFsi0AUAAIAtEegCAADAlgh0AQAAYEsEugAAALAlAl0AAADYEoEuAAAAbIlAFwAAALb0/wOhRuQC3dCBlAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 800x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Now all together in one code block that could run independently...\n",
    "# lets take care of importing everything we need at once\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Lets read in our file now\n",
    "df = pd.read_csv('../input/demo-knes381/subject_1321.csv', header=[0], skiprows=[1,2,3])\n",
    "\n",
    "# please note that while this is an output file from the parvo-metabolics cart we have\n",
    "# I have edited this data set and simplied the header file on it\n",
    "\n",
    "# rename our column headers\n",
    "df = df.rename(columns={'VE/': 'VE/VO2','VE/.1': 'VE/VCO2'})\n",
    "\n",
    "# simplify our terms to reduce future typing... \n",
    "# it is easier to write plot x, y than plot df['Time'], df['VO2']\n",
    "x = df['TIME']\n",
    "y = df['VO2']\n",
    "y1 = df['VE']\n",
    "\n",
    "x1 = df['VO2']\n",
    "y2 = df['FECO2']\n",
    "y3 = df['VCO2']\n",
    "\n",
    "#Find VO2 max value \n",
    "ymax = max(y)\n",
    "\n",
    "# find the x position of the ymax value or where ymax occurs on the x axis\n",
    "xmax = x[y.argmax()]\n",
    "\n",
    "# Defining Threshold Lines\n",
    "GET_x = x1[int(len(x1) * 0.3)]  # Example: 30% into the test\n",
    "RCP_x = x1[int(len(x1) * 0.8)]  # Example: 80% into the test\n",
    "\n",
    "fig, ax = plt.subplots(2, 1, sharex=True, figsize=(8, 10)) # Note I increased the figure size here.\n",
    "\n",
    "# this line seperates the two plots...\n",
    "fig.subplots_adjust(hspace=0)\n",
    "\n",
    "# annotate the position of V02 max before plotting the value, we could do this later but why.\n",
    "\n",
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(ymax, 2)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ .5),\n",
    "               arrowprops=dict(facecolor='red', shrink= 0.05),\n",
    "                )\n",
    "\n",
    "ax[0].plot(x, y, 'o', label=('$\\dot VO_2$'), c='r' )\n",
    "# in the line of code below I hide the top and right black bars serrounding the plot for APA format.\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "ax[0].set(ylabel=('$\\dot VO_2$ (L/min)'))\n",
    "ax[0].legend()\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "\n",
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, 'o', label=('VE'), c='b')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('VE (L/min)'))\n",
    "ax[1].set(xlabel=('Time (min)'))\n",
    "ax[1].legend()\n",
    "\n",
    "fig, ax = plt.subplots(2, 1, sharex=True, figsize=(8, 10)) # Note I increased the figure size here.\n",
    "fig.subplots_adjust(hspace=0)\n",
    "\n",
    "# Third plot of values\n",
    "ax[0].plot(x1, y2, 'o', label=('$\\ FECO_2$'), c='g')\n",
    "ax[0].spines[['top', 'right']].set_visible(False)\n",
    "ax[0].set(ylabel=('$\\ FECO_2$ (%)'))\n",
    "#ax[0].set(xlabel=('$\\dot VO_2$ (L/min)'))\n",
    "ax[0].legend()\n",
    "\n",
    "# Fourth plot of values\n",
    "ax[1].plot(x1, y3, 'o', label=('$\\dot VCO_2$'), c='y')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('$\\dot VCO_2$ (L/min)'))\n",
    "ax[1].set(xlabel=('$\\dot VO_2$ (L/min)'))\n",
    "ax[1].legend()\n",
    "\n",
    "# Plotting Threshold lines\n",
    "for i in range (2):\n",
    "    ax[i].axvline(GET_x, color='lightblue', linestyle='--', label='T1')\n",
    "    ax[i].axvline(RCP_x, color='lightblue', linestyle='--', label='T2')\n",
    "    \n",
    "# save the figure before we show it... or it will be blank\n",
    "fig.savefig(\"VO2-VE-4.png\", dpi=300, bbox_inches = \"tight\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8090926",
   "metadata": {
    "papermill": {
     "duration": 0.008421,
     "end_time": "2025-03-25T18:53:39.444763",
     "exception": false,
     "start_time": "2025-03-25T18:53:39.436342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Please note that if you change the file path of the datafile in the code block above you create an completely new graph for your new data, all by changing just one line of code...\n",
    "Also I have changed the marker form a line to dots, can you see somthing about the data that was hidden before when it was plotted in lines?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afb3e48a",
   "metadata": {
    "papermill": {
     "duration": 0.008227,
     "end_time": "2025-03-25T18:53:39.461468",
     "exception": false,
     "start_time": "2025-03-25T18:53:39.453241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2952233,
     "sourceId": 5084312,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30407,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16.109197,
   "end_time": "2025-03-25T18:53:40.195149",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-25T18:53:24.085952",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
